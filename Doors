local repo = "https://raw.githubusercontent.com/UserR16/Library/refs/heads/main/"
local Library = loadstring(game:HttpGet(repo .. "Library"))()
local SaveManager = loadstring(game:HttpGet(repo .. "SaveManager"))()
local SaveManager = loadstring(game:HttpGet(repo .. "ThemeManager"))()

local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/IceMinisterq/Notification-Library/Main/Library.lua"))()

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Char = LocalPlayer.Character
local RunService = game:GetService("RunService")

if game.Players.LocalPlayer.PlayerGui.MainUI.Initiator:FindFirstChild("Main_Game") then
local Main_Game = require(game.Players.LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game)
end

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local GameData = ReplicatedStorage:WaitForChild("GameData")
local Floor = GameData:WaitForChild("Floor")

if game.PlaceId == 110258689672367 then
RemotesFolder = ReplicatedStorage.Bricks
else
RemotesFolder = ReplicatedStorage.RemotesFolder
end

local Window = Library:CreateWindow({
Title = "Lunaria - (v0.0.1) DOORS",
Center = true,
AutoShow = true,
TabPadding = 5,
MenuFadeTime = 0.2
})

local function Notify(title, time)
Notification:SendNotification("Warning", title, time or 5)
wait(0.25)
for _,v in ipairs(game.CoreGui:GetDescendants()) do
if v.Name == "Warning" then
local UIStroke = Instance.new("UIStroke", v)
UIStroke.Thickness = 3
UIStroke.Color = Color3.fromRGB(20,20,20)
v.Size = UDim2.new(1,0,0.04,0)
v.bar.Visible = false
v.Filler.Visible = false
v.Header.TextColor3 = Color3.new(1,1,1)
v.Header.Position = UDim2.new(0.425,0,0.57,0)
if v.decal:FindFirstChild("icon") then
v.decal.icon:Destroy()
end
local Sound = Instance.new("Sound")
Sound.Parent = game.SoundService
Sound.SoundId = "rbxassetid://4590657391"
Sound.Volume = _G.PlaySound and 10 or 0
Sound.PlayOnRemove = true
Sound:Destroy()
end
end
end

local Tabs = {
Main = Window:AddTab("Main"),
Players = Window:AddTab("Players"),
Exploits = Window:AddTab("Exploits"),
Visual = Window:AddTab("Visual"),
Config = Window:AddTab("Config")
}
local Notifier = Tabs.Main:AddLeftGroupbox("Notifier")

Notifier:AddToggle("EntitiesNotify",{
Text = "Entities Notify",
Default = false,
Callback = function(v)
if v then
EntityTable = {'RushMoving', 'AmbushMoving', 'BackdoorRush', 'A60', 'A120', 'MonumentEntity', 'BackdoorLookman', 'Eyes', 'Groundskeeper', 'SeekMoving', 'SeekMovingNewClone', 'JeffTheKiller', 'GlitchRush', 'GlitchAmbush', 'GloombatSwarm', 'SallyWindow'}
EntityNotify = workspace.DescendantAdded:Connect(function(v)
if table.find(EntityTable,v.Name) then
repeat task.wait() until game.Players.LocalPlayer:DistanceFromCharacter(v:GetPivot().Position) < 750 or not v:IsDescendantOf(workspace)
if v:IsDescendantOf(workspace) then
if v.Name == "RushMoving" then
Notify("Rush!")
if _G.PlayChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Rush!")
end
elseif v.Name == "AmbushMoving" then
Notify("Ambush!")
if _G.PlayChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Ambush!")
end
elseif v.Name == "BackdoorRush" then
Notify("Blitz!")
if _G.PlayChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Blitz!")
end
elseif v.Name == "A60" then
Notify("A60!")
if _G.PlayChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("A60!")
end
elseif v.Name == "A120" then
Notify("A120!")
if _G.PlayChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("A120!")
end
elseif v.Name == "MonumentEntity" then
Notify("Monument!")
if _G.PlayChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Monument!")
end
elseif v.Name == "BackdoorLookman" then
Notify("Lookman!")
if _G.PlayChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Lookman!")
end
elseif v:IsA("Model") and v.Name == "Eyes" then
Notify("Eyes!")
if _G.PlayChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Eyes!")
end
elseif v.Name == "Groudskeeper" then
Notify("Groundskeeper!")
if _G.PlayChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Groudskeeper!")
end
elseif v.Name == "SeekMoving" or v.Name == "SeekMovingNewClone" then
Notify("Seek, goodluck!")
if _G.PlayChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Seek, goodluck!")
end
elseif v.Name == "JeffTheKiller" then
Notify("Jeff!")
if _G.PlayChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Jeff!")
end
elseif v.Name == "GlitchRush" then
Notify("Glitch Rush!")
elseif v.Name == "GlitchAmbush" then
Notify("Glitch Ambush!")
elseif v.Name == "GloombatSwarm" then
Notify("Gloombat Swarm!")
if _G.PlayChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Gloombat Swarm!")
end
elseif v.Name == "SallyWindow" then
Notify("Sally!")
if _G.PlayChat then
game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("Sally!")
end
end
end
end
end)
else
EntityNotify:Disconnect()
end
end})
Notifier:AddToggle("PlayChat",{
Text = "Play Chat",
Default = false,
Callback = function(v)
_G.PlayChat = v
end})
Notifier:AddToggle("PlaySound",{
Text = "Play Sound",
Default = false,
Callback = function(v)
_G.PlaySound = v
end})
if Floor.Value == "Hotel" or Floor.Value == "Mines" or Floor.Value == "Garden" then
if not game.ReplicatedStorage:FindFirstChild("Bricks") then
Notifier:AddDivider()
Notifier:AddToggle("OxygenNotify",{
Text = "Oxygen Notify",
Default = false,
Callback = function(v)
if v then
OxygenNotify = game.Players.LocalPlayer.Character:GetAttributeChangedSignal("Oxygen"):Connect(function()
if game.Players.LocalPlayer.Character:GetAttribute("Oxygen") < 100 then
firesignal(RemotesFolder.Caption.OnClientEvent, string.format("Oxygen: %.1f", game.Players.LocalPlayer.Character:GetAttribute("Oxygen")))
end
end)
else
OxygenNotify:Disconnect()
end
end})
end
end
local Doors = Tabs.Main:AddRightGroupbox("Doors")
game:GetService("RunService").RenderStepped:Connect(function()
if _G.ReachDoors then
game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Door").ClientOpen:FireServer()
end
if _G.FastDoors then 
game.workspace.CurrentRooms[tostring(game:GetService("ReplicatedStorage").GameData.LatestRoom.Value)]:WaitForChild("Door"):SetAttribute("FastOpen", true)
end
end)

Doors:AddToggle("ReachDoors",{
Text = "Reach Doors",
Default = false,
Callback = function(v)
_G.ReachDoors = v
end})
Doors:AddToggle("FastDoors",{
Text = "Fast Doors",
Default = false,
Callback = function(v)
_G.FastDoors = v
end})

local ProximityPrompt = Tabs.Main:AddRightGroupbox("Proximity Prompt")
workspace.CurrentRooms.DescendantAdded:Connect(function(v)
if not _G.InstanceInteract then return end
if not _G.ReachInteract then return end
if not _G.ThroughInteract then return end
if v:IsA("ProximityPrompt") then
if _G.InstanceInteract then
v.HoldDuration = 0
end
if _G.ReachInteract then
v.MaxActivationDistance = 15
end
if _G.ThroughInteract then
v.RequiresLineOfSight = false
end
end
end)

ProximityPrompt:AddToggle("InstanceInteract",{
Text = "Instance Interact",
Default = false,
Callback = function(v)
_G.InstanceInteract = v
if v then
for _,v in pairs(workspace.CurrentRooms:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.HoldDuration = 0
end
end
else
print()
end
end})
ProximityPrompt:AddToggle("ReachInteract",{
Text = "Reach Interact",
Default = false,
Callback = function(v)
_G.ReachInteract = v
if v then
for _,v in pairs(workspace.CurrentRooms:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = 15
end
end
else
for _,v in pairs(workspace.CurrentRooms:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.MaxActivationDistance = 7
end
end
end
end})
ProximityPrompt:AddToggle("ThroughInteract",{
Text = "Through Interact",
Default = false,
Callback = function(v)
_G.ThroughInteract = v
if v then
for _,v in pairs(workspace.CurrentRooms:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.RequiresLineOfSight = false
end
end
else
for _,v in pairs(workspace.CurrentRooms:GetDescendants()) do
if v:IsA("ProximityPrompt") then
v.RequiresLineOfSight = true
end
end
end
end})
local World = Tabs.Main:AddLeftGroupbox("World")
game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(function()
if _G.ClosetsExitFix and game.Players.LocalPlayer.Character:GetAttribute("Hiding")==true then 
RemotesFolder.CamLock:FireServer()
end 
end)
World:AddToggle("ClosetsExitFix",{
Text = "Closets Exit Fix",
Default = false,
Callback = function(v)
_G.ClosetsExitFix = v
end})
if Floor.Value == "Retro" then
World:AddToggle("BlurFakeBridge",{
Text = "Blur Fake Bridge",
Default = false,
Callback = function(v)
if v then
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true and v then
v.Transparency = 0.9
end
end
BlurFakeBridge = workspace.CurrentRooms.ChildAdded:Connect(function(v)
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true and v then
v.Transparency = 0.75
end
end
end)
else
BlurFakeBridge:Disconnect()
for _,v in pairs(workspace:GetDescendants()) do
if v.Name == "Bridge" and not v.CanCollide == true and v then
v.Transparency = 0
end
end
end
end})
end
World:AddDivider()
if Floor.Value == "Hotel" or Floor.Value == "Mines" or Floor.Value == "Backdoor" then
World:AddToggle("DisableSanity",{
Text = "Disable Sanity",
Default = false,
Callback = function(v)
_G.NoLiveSanity = v
while _G.NoLiveSanity == true do wait()
for _,v in workspace.CurrentCamera:GetChildren() do
if v.Name == "LiveSanity" and v then
v.Enabled = false
end
end
end
end})
end
local Void = workspace.FallenPartsDestroyHeight
World:AddToggle("DisableVoid",{
Text = "Disable Void",
Default = false,
Callback = function(v)
if v then
workspace.FallenPartsDestroyHeight = 0 / 0
else
workspace.FallenPartsDestroyHeight = Void
end
end})
if Floor.Value == "Hotel" or Floor.Value == "Mines" then
World:AddToggle("DisableJamming",{
Text = "Disable Jamming",
Default = false,
Callback = function(v)
_G.HidingJam = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.HidingJam then
if ReplicatedStorage:FindFirstChild("LiveModifiers"):FindFirstChild("Jammin") then
game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.Health.Jam.Playing = false
end
else
if ReplicatedStorage:FindFirstChild("LiveModifiers"):FindFirstChild("Jammin") then
game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.Health.Jam.Playing = true
end
end
end)
end})
end
World:AddToggle("DisableVoid",{
Text = "Disable Walking Sound",
Default = false,
Callback = function(v)
if v then
DisableWalkingSound = game.Players.LocalPlayer.Character.ChildAdded:Connect(function(v)
if v:IsA("Sound") then
v:Destroy()
end
end)
else
DisableWalkingSound:Disconnect()
end
end})
World:AddDivider()
World:AddDropdown('MaterialList',{
  Values = {'Neon', 'ForceField', 'Plastic'},
  Default = 1,
  Multi = false,
  Callback = function(v)
_G.MaterialList = v
end})
World:AddToggle("ShowPathfindNodes",{
Text = "Show Pathfind Nodes",
Default = false,
Callback = function(v)
if v then
for _,v in ipairs(workspace.CurrentRooms:GetDescendants()) do
if v.Parent.Name == "PathfindNodes" and v then
local Part = Instance.new("Part",workspace)
Part.Size = Vector3.new(1.5,1.5,1.5)
Part.CFrame = v.CFrame
Part.CanCollide = false
Part.Shape = "Ball"
Part.Anchored = true
Part.Material = _G.MaterialList or "Neon"
end
end
ShowPathfindNodes = workspace.CurrentRooms.DescendantAdded:Connect(function(v)
if v.Parent.Name == "PathfindNodes" and v then
local Part = Instance.new("Part",workspace)
Part.Size = Vector3.new(1.5,1.5,1.5)
Part.Name = "_PathfindNodes"
Part.CFrame = v.CFrame
Part.CanCollide = false
Part.Shape = "Ball"
Part.Anchored = true
Part.Material = _G.MaterialList or "Neon"
end
end)
else
ShowPathfindNodes:Disconnect()
for _,v in ipairs(workspace:GetDescendants()) do
if v.Name == "_PathfindNodes" then
v:Destroy()
end
end
end
end})

local Gameplay = Tabs.Main:AddRightGroupbox("Gameplay")
if Floor.Value == "Mines" then
Gameplay:AddButton("Notify Anchor Code", function()
if GameData.LatestRoom < 50 then
Notify("You right in room 50")
end
if GameData.LatestRoom > 50 then
Notify("You have done it")
end
if GameData.LatestRoom == 50 then
Notify("Anchor Code : " .. LocalPlayer.PlayerGui.MainUI:WaitForChild("AnchorHintFrame").AnchorCode.Text)
end
end)
end
if Floor.Value == "Hotel" or Floor.Value == "Fools" then
if not game.ReplicatedStorage:FindFirstChild("Bricks") then
Gameplay:AddToggle("AutoPadlockUnlock",{
Text = "Auto Padlock Unlock",
Default = false,
Callback = function(v)
_G.AutoPadlockUnlock = v
local Paper = workspace:FindFirstChild("LibraryHintPaper",true) or workspace:FindFirstChild("LibraryHintPaperHard",true) or Players:FindFirstChild("LibraryHintPaper",true) or Players:FindFirstChild("LibraryHintPaperHard",true)
if not Paper and ReplicatedStorage.GameData.LatestRoom == 50 then
Library:Notify("[50] : Now you need Paper", if ReplicatedStorage.GameData.LatestRoom == 50 then 9e9 else 1)
return
end
RunService.Heartbeat:Connect(function()
if Paper and _G.AutoPadlockUnlock then
local HintsNeeded = Floor.Value == "Fools" and 8 or 3
local Hints = 0
for _,Collected in pairs(LocalPlayer.PlayerGui.PermUI.Hints:GetChildren()) do
if Collected.Name == "Icon" then
if Collected:IsA("ImageLabel") then
for _,Icon in pairs(Paper.UI:GetChildren()) do
if tonumber(Icon.Name) then
if Icon.ImageRectOffset == Collected.ImageRectOffset then
Hints += 1
end
end
end
end
end
end
if Hints < HintsNeeded then
return
end
local t = {}
for i = 1, Floor.Value == "Hotel" and 5 or 10 do
local Icon = Paper.UI[i]
local Number = -1
for _,Collected in pairs(LocalPlayer.PlayerGui.PermUI.Hints:GetChildren()) do
if Collected.Name == "Icon" then
if Collected.ImageRectOffset == Icon.ImageRectOffset then
Number = tonumber(Collected.TextLabel.Text)
end
end
end
table.insert(t,Number)
end
for one=0,t[1]==-1 and 9 or 0 do
for two=0,t[2]==-1 and 9 or 0 do
for three=0,t[3]==-1 and 9 or 0 do
for four=0,t[4]==-1 and 9 or 0 do
for five=0,t[5]==-1 and 9 or 0 do
if Floor.Value == "Fools" then
for six=0,t[6]==-1 and 9 or 0 do
for seven=0,t[7]==-1 and 9 or 0 do
for eight=0,t[8]==-1 and 9 or 0 do
for nine=0,t[9]==-1 and 9 or 0 do
for ten=0,t[10]==-1 and 9 or 0 do
RemotesFolder.PL:FireServer((t[1]==-1 and one or t[1])..(t[2]==-1 and two or t[2])..(t[3]==-1 and three or t[3])..(t[4]==-1 and four or t[4])..(t[5]==-1 and five or t[5])..(t[6]==-1 and six or t[6])..(t[7]==-1 and seven or t[7])..(t[8]==-1 and eight or t[8])..(t[9]==-1 and nine or t[9])..(t[10]==-1 and ten or t[10]))
end
end
end
end
end
else
RemotesFolder.PL:FireServer((t[1]==-1 and one or t[1])..(t[2]==-1 and two or t[2])..(t[3]==-1 and three or t[3])..(t[4]==-1 and four or t[4])..(t[5]==-1 and five or t[5]))
end
end
end
end
end
end
end
end)
end}) 
end
Gameplay:AddToggle("AutoBreakerBox",{
Text = "Auto Breaker Box",
Default = false,
Callback = function(v)
_G.AutoBreakerBox = v
RunService.Heartbeat:Connect(function()
if _G.AutoBreakerBox and ReplicatedStorage.GameData.LatestRoom == 100 then
RemotesFolder.EBF:FireServer()
end
end)
end})
end

Gameplay:AddDivider()
local Head = Char:FindFirstChild("Head")
local function EntitySpecting()
if Char:GetAttribute("Hiding") == true then
if workspace:FindFirstChild("RushMoving") and (workspace:FindFirstChild("RushMoving"):FindFirstChildOfClass("Part").Position - Char:FindFirstChild("HumanoidRootPart").Position).Magnitude < 750 then
workspace.CurrentCamera.CFrame = CFrame.lookAt(Head.Position, workspace:FindFirstChild("RushMoving"):FindFirstChildOfClass("Part").Position)
elseif workspace:FindFirstChild("AmbushMoving") and (workspace:FindFirstChild("AmbushMoving"):FindFirstChildOfClass("Part").Position - Char:FindFirstChild("HumanoidRootPart").Position).Magnitude < 750 then
workspace.CurrentCamera.CFrame = CFrame.lookAt(Head.Position, workspace:FindFirstChild("AmbushMoving"):FindFirstChildOfClass("Part").Position)
elseif workspace:FindFirstChild("A60") and (workspace:FindFirstChild("A60"):FindFirstChildOfClass("Part").Position - Char:FindFirstChild("HumanoidRootPart").Position).Magnitude < 750 then
workspace.CurrentCamera.CFrame = CFrame.lookAt(Head.Position, workspace:FindFirstChild("A60"):FindFirstChildOfClass("Part").Position)
elseif workspace:FindFirstChild("A120") and (workspace:FindFirstChild("A120"):FindFirstChildOfClass("Part").Position - Char:FindFirstChild("HumanoidRootPart").Position).Magnitude < 750 then
workspace.CurrentCamera.CFrame = CFrame.lookAt(Head.Position, workspace:FindFirstChild("A120"):FindFirstChildOfClass("Part").Position)
elseif workspace:FindFirstChild("BackdoorRush") and (workspace:FindFirstChild("BackdoorRush"):FindFirstChildOfClass("Part").Position - Char:FindFirstChild("HumanoidRootPart").Position).Magnitude < 750 then
workspace.CurrentCamera.CFrame = CFrame.lookAt(Head.Position, workspace:FindFirstChild("BackdoorRush"):FindFirstChildOfClass("Part").Position)
elseif workspace:FindFirstChild("GlitchRush") and (workspace:FindFirstChild("GlitchRush"):FindFirstChildOfClass("Part").Position - Char:FindFirstChild("HumanoidRootPart").Position).Magnitude < 750 then
workspace.CurrentCamera.CFrame = CFrame.lookAt(Head.Position, workspace:FindFirstChild("GlitchRush"):FindFirstChildOfClass("Part").Position)
elseif workspace:FindFirstChild("GlitchAmbush") and (workspace:FindFirstChild("GlitchAmbush"):FindFirstChildOfClass("Part").Position - Char:FindFirstChild("HumanoidRootPart").Position).Magnitude < 750 then
workspace.CurrentCamera.CFrame = CFrame.lookAt(Head.Position, workspace:FindFirstChild("GlitchAmbush"):FindFirstChildOfClass("Part").Position)
end
end
end
RunService.RenderStepped:Connect(function()
if _G.EntitySpecting then
EntitySpecting()
end
end)
Gameplay:AddToggle("EntitySpecting",{
Text = "Entity Specting",
Default = false,
Callback = function(v)
_G.EntitySpecting = v
end})
local Miscellaneous = Tabs.Main:AddRightGroupbox("Miscellaneous")
Miscellaneous:AddButton({
Text = "Play Again",
DoubleClick = true,
Func = function()
RemotesFolder.PlayAgain:FireServer()
end}):AddButton({
Text = "Lobby",
DoubleClick = true,
Func = function()
RemotesFolder.PlayAgain:FireServer()
end})
Miscellaneous:AddButton({
Text = "Leave",
DoubleClick = true,
Func = function()
game:Shutdown()
end}):AddButton({
Text = "Revive",
DoubleClick = true,
Func = function()
RemotesFolder.Revive:FireServer()
end})
Miscellaneous:AddButton({
Text = "Reset Character",
DoubleClick = true,
Func = function()
if replicatesignal then
replicatesignal(game.Players.LocalPlayer.Kill)
elseif Char:FindFirstChildWhichIsA("Humanoid") then
Char:FindFirstChildWhichIsA("Humanoid"):ChangeState(Enum.HumanoidStateType.Dead)
else
Char:BreakJoints()
end
end})

local Players = Tabs.Players:AddLeftGroupbox("Players")
game:GetService("RunService").RenderStepped:Connect(function()
game.Players.LocalPlayer.Character:SetAttribute("SpeedBoostExtra", _G.SpeedBoost and _G.SpeedBoostSlider or 0)
end)
Players:AddSlider("SpeedBoostSlider",{
Text = "Speed Boost Slider",
Min = 1,
Default = 1,
Max = _G.SpeedBypass and 20 or 6,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.SpeedBoostSlider = v or 1
end})
Players:AddToggle("SpeedBoost",{
Text = "Speed Boost",
Default = false,
Callback = function(v)
_G.SpeedBoost = v
end})
Players:AddSlider("SpeedFlySlider",{
Text = "Speed Fly Slider",
Default = 16,
Min = 16,
Max = _G.SpeedBypass and 50 or 21,
Rounding = 1,
Compact = true,
Callback = function(v)
_G.SpeedFlySlider = v or 16
end})
Players:AddToggle("Fly",{
Text = "Fly",
Default = false,
Callback = function(v)
_G.Fly = v
if _G.Fly == false then
if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler:Destroy()
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler:Destroy()
game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
end
end
while _G.Fly do
if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.MaxForce = Vector3.new(9e9,9e9,9e9)
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler.MaxTorque = Vector3.new(9e9,9e9,9e9)
game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler.CFrame = Workspace.CurrentCamera.CoordinateFrame
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = Vector3.new()
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X > 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity + game.Workspace.CurrentCamera.CFrame.RightVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X * _G.SpeedFlySlider)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X < 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity + game.Workspace.CurrentCamera.CFrame.RightVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().X * _G.SpeedFlySlider)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z > 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity - game.Workspace.CurrentCamera.CFrame.LookVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z * _G.SpeedFlySlider)
end
if require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z < 0 then
game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity - game.Workspace.CurrentCamera.CFrame.LookVector * (require(game.Players.LocalPlayer.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule")):GetMoveVector().Z * _G.SpeedFlySlider)
end
elseif game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") == nil and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") == nil then
local bv = Instance.new("BodyVelocity")
local bg = Instance.new("BodyGyro")

bv.Name = "VelocityHandler"
bv.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
bv.MaxForce = Vector3.new(0,0,0)
bv.Velocity = Vector3.new(0,0,0)

bg.Name = "GyroHandler"
bg.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
bg.MaxTorque = Vector3.new(0,0,0)
bg.P = 1000
bg.D = 50
end
task.wait()
end
end}):AddKeyPicker("Fly", {
Default = "F",
Text = "Fly",
Mode = Library.IsMobile and "Toggle",
SyncToggleState = Library.IsMobile
})
Players:AddDivider()
if Floor.Value == "Hotel" or Floor.Value == "Mines" then
if not game.ReplicatedStorage:FindFirstChild("Bricks") then
Players:AddToggle("AlwaysEatCandy",{
Text = "Always Eat Candy",
Default = false,
Callback = function(v)
_G.AlwaysEatCandy = v
game:GetService("RunService").RenderStepped:Connect(function()
if game.Players.LocalPlayer.Character:FindFirstChild("Candy",true) and _G.AlwaysEatCandy then
if not game.Players.LocalPlayer.Character:FindFirstChild("Meshes/DOORS_EvilCandy_Cube", true) then
game.Players.LocalPlayer.Character.Candy.Remote:FireServer()
end
end
end)
end})
end
end
Players:AddToggle("NoAccessories",{
Text = "No Accessories",
Default = false,
Callback = function(v)
_G.NoAccessories = v
game:GetService("RunService").RenderStepped:Connect(function()
Char.Head.Massless = not _G.NoAccessories
Char.LeftFoot.Massless = not _G.NoAccessories
Char.LeftHand.Massless = not _G.NoAccessories
Char.LeftLowerArm.Massless = not _G.NoAccessories
Char.LeftLowerLeg.Massless = not _G.NoAccessories
Char.LeftUpperArm.Massless = not _G.NoAccessories
Char.LeftUpperLeg.Massless = not _G.NoAccessories
Char.LowerTorso.Massless = not _G.NoAccessories
Char.RightFoot.Massless = not _G.NoAccessories
Char.RightFoot.Massless = not _G.NoAccessories
Char.RightHand.Massless = not _G.NoAccessories
Char.RightLowerArm.Massless = not _G.NoAccessories
Char.RightLowerLeg.Massless = not _G.NoAccessories
Char.RightUpperArm.Massless = not _G.NoAccessories
Char.RightUpperLeg.Massless = not _G.NoAccessories
Char.UpperTorso.Massless = not _G.NoAccessories
end)
end})
Players:AddDivider()
if not game.ReplicatedStorage:FindFirstChild("Bricks") then
Players:AddToggle("NoclipBypass",{
Text = "Noclip Bypass",
Default = false,
Callback = function(v)
_G.NoclipBypass = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.NoclipBypass then
Char.Humanoid.WalkSpeed = 1
end
end)
end}):AddKeyPicker("AddNoclip", {
Default = "V",
Text = "Add Noclip",
Mode = Library.IsMobile and "Toggle",
SyncToggleState = Library.IsMobile
})
end
Players:AddToggle("Noclip",{
Text = "Noclip",
Default = false,
Callback = function(v)
if v then
Noclip = game:GetService("RunService").RenderStepped:Connect(function()
if LocalPlayer and Char then
for _, part in pairs(Char:GetDescendants()) do
if part:IsA("BasePart") then
part.CanCollide = false
end
end
end
end)
else
if Noclip then
Noclip:Disconnect()
Noclip = nil
end
end
end}):AddKeyPicker("Noclip", {
Default = "N",
Text = "Noclip",
Mode = Library.IsMobile and "Toggle",
SyncToggleState = Library.IsMobile
})
if not game.ReplicatedStorage:FindFirstChild("Bricks") then
Players:AddDivider()
Players:AddToggle("NoFootsteps",{
Text = "No Footsteps",
Default = false,
Callback = function(v)
_G.NoFootsteps = v
game:GetService("RunService").RenderStepped:Connect(function()
if game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game:FindFirstChild('Footsteps') then
game:GetService("Players").LocalPlayer.PlayerGui.MainUI.Initiator.Main_Game.Footsteps.Enabled = not _G.NoFootsteps
end
end)
end})
end

local LocalPlayer = Tabs.Players:AddRightGroupbox("LocalPlayer")
if not game.ReplicatedStorage:FindFirstChild("Bricks") then
LocalPlayer:AddToggle("AlwaysJump",{
Text = "Always Jump",
Default = false,
Callback = function(v)
_G.AlwaysJump = v
game:GetService("RunService").RenderStepped:Connect(function()
game.Players.LocalPlayer.Character:SetAttribute("CanJump", _G.AlwaysJump)
end)
end}):AddKeyPicker("AlwaysJump", {
Default = "J",
Text = "Always Jump ",
Mode = Library.IsMobile and "Toggle",
SyncToggleState = Library.IsMobile,
})
LocalPlayer:AddDivider()
end
LocalPlayer:AddToggle("CrouchSpoof",{
Text = "Crouch Spoof",
Default = false,
Callback = function(v)
_G.CrouchSpoof = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.CrouchSpoof then
RemotesFolder.Crouch:FireServer(true)
end
end)
end})
LocalPlayer:AddDivider()
if not game.ReplicatedStorage:FindFirstChild("Bricks") then
local ClonedCollision = game:GetService("Players").LocalPlayer.Character.CollisionPart:Clone()
ClonedCollision.Name = "_CollisionClone"
ClonedCollision.Parent = Char
ClonedCollision.CanCollide = false
task.spawn(function()
while true do
if _G.SpeedBypass then
if ClonedCollision then
ClonedCollision.Massless = false
task.wait(0.23456)
ClonedCollision.Massless = true
task.wait(0.23456)
else
break
end
end
wait()
end
end)
LocalPlayer:AddToggle("SpeedBypass",{
Text = "Speed Bypass",
Default = false,
Callback = function(v)
_G.SpeedBypass = v
end})
end
if Floor.Value == "Mines" then
LocalPlayer:AddToggle("LadderBypass",{
Text = "Ladder Bypass",
Default = false,
Callback = function(v)
_G.LadderBypass = v
task.spawn(function()
while _G.LadderBypass do wait(1)
if _G.LadderBypass and not workspace:FindFirstChild("Ladder_Bypass") then
local progressPart = Instance.new("Part", workspace) do
progressPart.Anchored = true
progressPart.CanCollide = false
progressPart.Name = "Ladder_Bypass"
progressPart.Transparency = 1
end
if _G.LadderBypass and game.Players.LocalPlayer.Character:GetAttribute("Climbing") then
task.wait(0.1)
game.Players.LocalPlayer.Character:SetAttribute("Climbing", false)
Notify("Now, you right find ladder")
end
else
if workspace:FindFirstChild("Ladder_Bypass") then 
workspace:FindFirstChild("Ladder_Bypass"):Destroy() 
end
end
end
end)
end})
end
LocalPlayer:AddToggle("ManipulateBypass",{
Text = "Manipulate Bypass",
Default = false,
Callback = function(v)
_G.ManipulateBypass = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.ManipulateBypass then
game.Players.LocalPlayer.Character:PivotTo(game.Players.LocalPlayer.Character:GetPivot() + workspace.CurrentCamera.CFrame.LookVector * Vector3.new(1, 0, 1) * -100)
end
end)
end}):AddKeyPicker("ManipulateBypassKey", {
Default = "B",
Text = "Manipulate Bypass",
Mode = Library.IsMobile and "Toggle",
SyncToggleState = Library.IsMobile,
})
LocalPlayer:AddDivider()
LocalPlayer:AddToggle("ChamsBody",{
Text = "Chams Body",
Default = false,
Callback = function(v)
_G.ChamsBody = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.ChamsBody then
for _, part in pairs(Char:GetDescendants()) do
if part:IsA("BasePart") then
part.Material = "ForceField"
end
end
end
end)
end})
LocalPlayer:AddToggle("HideBody",{
Text = "Hide Body",
Default = false,
Callback = function(v)
_G.HideBody = v
game:GetService("RunService").RenderStepped:Connect(function()
if _G.HideBody then
for _, part in pairs(Char:GetDescendants()) do
if part:IsA("BasePart") and part.Transparency == 0 then
part.Transparency = 0.987
end
end
else
for _, part in pairs(Char:GetDescendants()) do
if part:IsA("BasePart") and part.Transparency == 0.987 then
part.Transparency = 0
end
end
end)
end})





